<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System" #>
<#@ output extension=".md"#>
<#@ include file="$(SolutionDir)\(tools)\MDgen.ttinclude" once="true" #><#

///////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                           //
//     Copyright: Tobias Korn / version: 01.08.2021                                          //
//                                                                                           //
//     this template is open source (under Apache-2 license) and originated here:            //
//     https://github.com/KornSW/MDgen                                                       //
//                                                                                           //
///////////////////////////////////////////////////////////////////////////////////////////////

  var cfg = new {

         // BASE-SETTINGS /////////////////////////////////////////////////////////////////////

           // Source:
           inputFile = Path.GetFullPath(Host.ResolvePath(".\\bin\\Demo.dll")),
           assemblyResolveDir = Path.GetFullPath(Host.ResolvePath(".\\bin")),

           interfaceTypeNamePatterns = new string[] {
             "MyBusinessNamespace.I*"
           },

           requireXmlDocForNamespaces = new string[] { 
             "MyBusinessNamespace",
             "System.Data.Fuse"
           },

           // Output:
           template = "Default",     // <- choose between: Default
             
         // DEFAULT //////////////////////////////////////////////////////////////////////////

           countOfPrefixCharsToRemove = 1,

           namespaceWildcardsForModelImport = new string[] { 
             "MyBusinessNamespace.*",
             "System.Data.Fuse.*"
           }

         //////////////////////////////////////////////////////////////////////////////////////
       };

#>
<#=Generate(cfg)#>
<# /*

      IF YOU GET ANY ERRORS, REGARDING LOAD OF FILEs, PLEASE ENSURE THAT DLLS FROM NUGET-PACKAGES ARE COPIED INTO YOUR OUT-DIR:

      Place this in the frist section of your project-file:

        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>

     -------

      IF YOU GET ANY ERRORS, REGARDING LOAD OF DOCUMENTATION-FILES, PLEASE ENSURE THAT XML FROM NUGET-PACKAGES ARE COPIED INTO YOUR OUT-DIR:

      Place this at the end of your project-file:

        <Target Name="_ResolveCopyLocalNuGetPkgXmls" AfterTargets="ResolveReferences">
          <ItemGroup><!-- Copy XML files from all PackageReferences to output dir -->
            <ReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths->'%(RootDir)%(Directory)%(Filename).xml')"
            Condition="'%(ReferenceCopyLocalPaths.NuGetPackageId)'!='' and Exists('%(RootDir)%(Directory)%(Filename).xml')" />
          </ItemGroup>
        </Target>

*/#>